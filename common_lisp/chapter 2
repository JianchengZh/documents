第一次想完整地学一遍lisp，体验下lisp的先进性和语言进化的特点。

ANSI COMMON LISP 第二章只是给了读者一个印象，这就是common lisp，common lisp的语法就是这样的。

从第二章的例子中，整理出的一些lisp代码风格和命名习惯：
1. lisp中函数名字不使用下划线而是使用中线，比如： in-package
2. 函数名字最后为p的基本是判断函数，如 typep 判断类型， integerp 判断是否为整数。
3. lisp的书写使用换行时代码更容易阅读。即，在去掉所有括号的情况下，依然能清晰地阅读。


在第二章课后题目中，涉及到了第二章提到的几乎所有函数和相关概念。现将笔者做题时遇到的可能或容易出错的问题列出：

1. lisp中数值才有类型，而变量没有。而且类型是类似cpp中的类的继承关系。比如 数字 1 的类型依次为 fixnum, integer, rational, real, number, atom 和t类型。而类型t是所有类型的超集（super type）。函数 listp是检查参数是否为一个列表。而数字不是一个列表，所以(listp 1) 输出为NIL。
2. 递归，个人认为是lisp中的核心。
3. 函数 and 会依次对参数求值直到遇到参数为假后，之后的参数都不会求值。函数or在遇到参数为真后，后面的参数就不再求值。
4. 函数 funcall 和 函数apply 的区别 ：函数apply的最后一个参数必须为list，并且apply会判断这个list是否为参数传给函数;如果你的函数需要的参数是一个list，那就使用apply，如果是atom，那就使用funcall。
