* gcc的异常处理实现原理

** overview
   一般我们认为,程序错误有三种: 用户错误(user error);运行时错误
   (runtime error);异常(exceptions). 下面我们介绍下g++异常处理的实现.
   我们的目标是,通过这种介绍,能够用C代码实现类似CPP的异常处理机制.当然,由
   于缺少CPP中的exceptions类,我们只能时实现throw, try .. catch. 所以,
   重点就是介绍throw的实现和 try .. catch 的实现.

** throw的实现
   一般的throw代码如下. 抛出一个异常对象. 所以, 首先throw需要分配内存
   用于存放该异常对象,然后再根据这个异常,寻找对应的handler.在g++中,是由函数__cxa_allocate_exception实现,这
   个函数在libstdc++中可以找到.而执行例外handler的检索的动作
   由__cxa_throw 实现.换句话说, throw 实际是调用到__cxa_throw 函数.
#+BEGIN_SRC cpp
throw 0xff
#+END_SRC

** exceptions安装(try .. catch ..) (SjLj篇)
   SjLj是g++例外安装的一种实现方式, 可以通过'gcc --version', 查看是否
   有'--enable-sjlj-exceptions'选项.在主流的gcc中,都是disable的. 所谓
   的sjlj, 就是指利用setjmp/longjmp实现的异常处理方式.所以,所谓的
   sjlj exceptions实际上就是类似C中用setjmp/longjmp实现的类似goto的清
   理功能. exceptions实现如下:
    + 在线程的TLS中,存放全局的Context链表,该链表保存了所有catch的
      handler和相应的信息,包括jmp_buffer, error info等.
    + 在try时, 构造Context,并将jmp_buf, catch handler和相应信息存入
      Context,并调用setjmp.
    + 在throw时, 在throw中会获取全局的Context链表,查找能支持该错误类型
      的catch handler, 然后调用longjmp, 跳转到对应的catch中执行.
    + 在catch执行完成后,清理handler或者重新安装.


** exceptions安装(try .. catch ..) (WA2篇)
   DW2 全称是 DWARF2, 指调试人已记录格式V2, 是用户调试的信息格式的规格.
   而exceptions DW2 版是指,利用DW2的调试信息实现的exceptions跳转等动作.
   一般时Unwind-dw2 实现.

*** WA2预备知识.
    提到调试信息,基本上不可避免地想到堆栈信息.而要打印堆栈信息,必须得
    了解函数调用的一些规则和堆栈的结构.
**** C 函数的调用和返回
     首先,我们必须了解,编译器如何实现函数的调用和返回的.如果我们反汇编
     果代码,所有未优化的情况下,函数的调用都是通过几个push指令和call指
     令进行跳转. 所以,这里,编译器实际上是为每个函数建立了一个栈帧
     (stack frame).stack frame中存放了以下数据信息:
     1. 传递参数: 一般情况下,函数的调用参数是在该stack frame 最顶部.
     2. 返回地址: 也就是return的地址,通常指向函数调用的下一个指令.
     3. 调用者当前的栈指针: 用于恢复调用者现场
     4. 函数内部的局部变量.

        如下图:
        [[x86_stack_frame.png]]
        [[http://en.wikibooks.org/wiki/X86_Disassembly/Functions_and_Stack_Frames]]

        arm stack frame
     #+BEGIN_EXAMPLE
     | X | RSA | push    {lr} | # Register Save Area, 保存将会被修改的寄存器值 |
     | 20 | Locals and Temporaries | sub sp, #20  |  # 本地变量                                        |
     | X | R0-R3 |              | # 少数情况下,会将R0-R3寄存器的值进栈, R0-R3保存函数参数.           |
     #+END_EXAMPLE

     #+BEGIN_SRC asm
      // func call
          res=fuc(2,3);
  39c:   f04f 0002   mov.w   r0, #2
  3a0:   f04f 0103   mov.w   r1, #3
  3a4:   f7ff ffe4   bl  370 <fuc>

      // function
static int fuc(int x, int y) //定义函数
 {
  370:   b500        push    {lr}
  372:   b085        sub sp, #20

     #+END_SRC
     这里提下,调用约定.所谓调用约定,是指参数进栈的顺序,以及返回时,由谁
     清理栈信息.x86大部分调用约定时,C语言的参数进栈顺序是从右到左,由谁清理则可google "gcc 调
     用约定".
     而在arm中,参数对应R0-R3, 从左到右对应.

**** C++ 函数的调用和返回 (X86)
     这里为什么要把C++和C进行区分呢? 因为C++中存在异常处理!而异常处理
     的引入,在编译器生成stack frame时,需要额外引入一些数据和规则.
     我们先来看下面的图,和对应的跟异常相关的几个数据结构.

     #+BEGIN_SRC cpp

     #+END_SRC

**** ARM Exception Handling ABI
     在arm结构中,存在两个额外的section,用于存放exception的一些信息.它
     们是.ARM.exidx 和 .ARM.extab.
***** .ARM.exidx 结构如下

      #+BEGIN_EXAMPLE
        one  (KEY)
      +-+----------------------+
      |0| prel31_offset_to_fnc |
      +-+----------------------+
      31 30                   0

                                two
      EXIDX_CANTUNWIND    +----------------------+-+
                          |                      |1|
                          +----------------------+-+
                          31                    1 0

                                      two
      The ex table entry itself  +-+----------------------+
      encoded in 31bit           |1|         ex_tbl_entry |
                                 +-+----------------------+
                                 31 30                     0

                                           two
      prel32 offset of the start +-+----------------------+
      of the table entry for     |0| tbl_entry_offset     |
      this function              +-+----------------------+
                                 31 30                    0
      #+END_EXAMPLE

      ARM.exidx包含了已排序的key-value对数据结构. key 是一个31bit 指向对应函
      数的入口地址的值. 而value包含以下3个方面: 
1. 0x1, 函数无法被回退.
2. 31bit为1, 其余位为exception table entry的数据, 也就是说直接将
   excetion table中的对应数据放在该位置. 
3. 31bit为0, 其余位指向

***** .ARM.extab
      这个section存在两个结构, 如下, 
#+BEGIN_EXAMPLE
 generic model:
+-+----------------------+ +-----------------------
|0| prs_fnc_offset       | | prs_data             |
+-+----------------------+ +-----------------------
31 30                    0

 compact model:
+-+-----+-----+----------+ +-----------------------
|1| 0   | idx | prs_data | | optional_prs_data
+-+-----+-----+----------+ +-----------------------
31 30-28 27-24 23        0
#+END_EXAMPLE

我们使用的是第二种. bit 31 of the first word is set - in this case
the bits 24-27 selects one of the default personality routines.
在arm里面,存在3种personality routines.
[[personality_routine.png]]
[[unwind_instructions.png]]

PR这个函数的主要功能就是查找是否有满足需求的handler.

**** stack unwind
     stack unwind 的主要功能是,在异常处理完成后,能够安全地析构生命周期
     结束的所有资源.利用上面的两个section, 在throw(__cxx_throw)抛出时,
     触发_Unwind_RaiseException 函数调用,在这个函数中除了基本的寄存器
     状态保存和恢复外,还执行了堆栈的回退查找,用户查找调用者的异常处理,
     第一阶段如下(沙盒模式):
     1. 保存寄存器状态,并将返回的地址从r14 拷贝到 r15.
     2. 在.ARM.exidx 中查找地址匹配r15中地址的项.如果没找到,或者值是
        EXIDX_CANTUNWIND,则在终止异常抛出.
     3. 如果找到了,则执行一些基本的初始化,并执行对应personality
        routine(PR)函数.
     4. PR函数测试该entry是否能处理该异常. 有三个返回状态:
        _URC_HANDLER_FOUND(找到异常处理函数), _URC_CONTINUE_UNWIND(针
        对当前函数继续从1 开始执行,查找调用者函数能否处
        理),_URC_FAILURE(返回异常抛出者,失败).

     第二阶段如下:
     1 2 和 第一阶段 1 2 一样.
     3. 执行PR,检查该handler,确认下一步该做什么.
     4. PR检测handler时,返回三个状态: _URC_FAILURE(直接调用abort(), 无
        法还原了), _URC_CONTINUE_UNWIND(该栈帧已经被处理过了??清理过
        了??), _URC_INSTALL_CONTEXT(寄存器状态还原,清理栈)
     5. 在执行了清理函数后,可能会有需求继续扫描EHT表.

第一阶段,可以认为是虚拟了整个栈回退的过程,而未进行实际操作, 其作用是检
测是否存在异常处理handler. 第二阶段是,真正地执行栈回退和寄存器还原等操
作. 原因是,有规定,如果不存在handler,则返回到抛出异常的函数. 所以, 必须
确认有handler的情况下,才进行栈回退.

从这里,我们可以知道,在异常触发时,程序的运行效率大大降低. 栈回退的动作,
实际上跟打印堆栈的消耗差不多.

**** 异常抛出
#+BEGIN_SRC asm
     if(y==0)
      924:   9b00        ldr r3, [sp, #0]
      926:   2b00        cmp r3, #0
      928:   d10e        bne.n   948 <_Z3fucii+0x30>
         {
             throw y;     //除数为0，抛出异常
      92a:   f04f 0004   mov.w   r0, #4
      92e:   f7ff ef12   blx 754 <_start-0x9c> ; (偏移754 对应的.rel.plt表中的__cxa_allocate_exception, 分配exception需要的内存)
      932:   4603        mov r3, r0
      934:   9a00        ldr r2, [sp, #0]
      936:   601a        str r2, [r3, #0]
      938:   4618        mov r0, r3
      93a:   4b08        ldr r3, [pc, #32]   ; (95c <_Z3fucii+0x44>)
      93c:   58e3        ldr r3, [r4, r3]
      93e:   4619        mov r1, r3
      940:   f04f 0200   mov.w   r2, #0
      944:   f7ff ef0c   blx 760 <_start-0x90> ; (偏移760对应.rel.plt表中的__cxa_throw, 抛出异常, 在这个函数中会执行stack unwind, 找到catch语句块)
         }
#+END_SRC

从上面代码汇编代码中,我们可以看到,throw在g++中实际会调用两个exceptions
相关函数.

#+BEGIN_EXAMPLE
Relocation section '.rel.plt' at offset 0x690 contains 16 entries:
  Offset     Info    Type                Sym. Value  Symbol's Name
 00002fc0  00001616 R_ARM_JUMP_SLOT        00000724   __libc_init
 00002fc4  00000216 R_ARM_JUMP_SLOT        00000000   strlen
 00002fc8  00000616 R_ARM_JUMP_SLOT        00000000   _ZNSt6localeC1ERKS_
 00002fcc  00000816 R_ARM_JUMP_SLOT        00000000   _ZNSt8ios_base16_M_throw_failureEv
 00002fd0  00001716 R_ARM_JUMP_SLOT        00000000   __cxa_allocate_exception
 00002fd4  00001816 R_ARM_JUMP_SLOT        00000000   __cxa_throw
 00002fd8  00000d16 R_ARM_JUMP_SLOT        00000000   __aeabi_idiv
 00002fdc  00001a16 R_ARM_JUMP_SLOT        00000000   __cxa_end_catch
 00002fe0  00000516 R_ARM_JUMP_SLOT        00000000   __cxa_end_cleanup
 00002fe4  00001916 R_ARM_JUMP_SLOT        00000000   __cxa_begin_catch
 00002fe8  00000c16 R_ARM_JUMP_SLOT        00000000   exit
 00002fec  00000416 R_ARM_JUMP_SLOT        00000000   __gxx_personality_v0
 00002ff0  00000316 R_ARM_JUMP_SLOT        00000000   _ZNSt6localeD1Ev
 00002ff4  00001016 R_ARM_JUMP_SLOT        00000000   _ZSt18uncaught_exceptionv
 00002ff8  00000e16 R_ARM_JUMP_SLOT        00000000   _ZNSt4priv11_GetFacetIdEPKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
 00002ffc  00000716 R_ARM_JUMP_SLOT        00000000   _ZNKSt6locale12_M_use_facetERKNS_2idE
#+END_EXAMPLE

**** 异常捕获
#+BEGIN_SRC asm
     try {  //定义异常
         res=fuc(2,3);
      968:   f04f 0002   mov.w   r0, #2
      96c:   f04f 0103   mov.w   r1, #3
      970:   f7ff ffd2   bl  918 <_Z3fucii>
      974:   4603        mov r3, r0
      976:   9301        str r3, [sp, #4]

         res=fuc(4,0); // 出现异常，函数内部会抛出异常
      9a0:   f04f 0004   mov.w   r0, #4
      9a4:   f04f 0100   mov.w   r1, #0
      9a8:   f7ff ffb6   bl  918 <_Z3fucii>
      9ac:   4603        mov r3, r0
      9ae:   9301        str r3, [sp, #4]
      9b0:   f04f 0300   mov.w   r3, #0
     }  catch(double) {            //捕获并处理异常
      9ba:   f7ff eede   blx 778 <_start-0x78> (__cxa_end_catch, 清理因为之前的handler数据)
      9be:   f7ff eee2   blx 784 <_start-0x6c> (__cxa_end_cleanup, 重新生成handler需要的数据,恢复exceptions)
      9c2:   4603        mov r3, r0
      9c4:   460a        mov r2, r1
      9c6:   2a01        cmp r2, #1
      9c8:   d001        beq.n   9ce <main+0x6e>
      9ca:   f7ff eedc   blx 784 <_start-0x6c> (__cxa_end_cleanup, 重新生成handler需要的数据,恢复exceptions)
      9ce:   4618        mov r0, r3
      9d0:   f7ff eede   blx 790 <_start-0x60> (__cxa_begin_catch, 返回PR需要的handler的一些信息)
      9d4:   4603        mov r3, r0
      9d6:   e9d3 2300   ldrd    r2, r3, [r3]
      9da:   e9cd 2302   strd    r2, r3, [sp, #8]
         cerr<<"error of dividing zero.\n";
      9de:   4b0a        ldr r3, [pc, #40]   ; (a08 <main+0xa8>)
      9e0:   58e3        ldr r3, [r4, r3]
      9e2:   4618        mov r0, r3
      9e4:   4b09        ldr r3, [pc, #36]   ; (a0c <main+0xac>)
      9e6:   447b        add r3, pc
      9e8:   4619        mov r1, r3
      9ea:   f000 f811   bl  a10 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc>
         exit(1);                //异常退出程序
      9ee:   f04f 0001   mov.w   r0, #1
      9f2:   f7ff eed4   blx 79c <_start-0x54> (exit, )
      9f6:   bf00        nop
      9f8:   0000264a    .word   0x0000264a
      9fc:   fffffff0    .word   0xfffffff0
      a00:   00000a34    .word   0x00000a34
      a04:   fffffff4    .word   0xfffffff4
      a08:   fffffff8    .word   0xfffffff8
      a0c:   000009e6    .word   0x000009e6
 
 00000a10 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc>:
   return __os;
}
#+END_SRC

从这段汇编,我们可以看到在函数调用和try之间,不存在跟函数调用无关的汇编
指令,所以,我们可以认为在未触发函数调用的情况下,异常函数不产生额外的开
销.通过stack frame的图,和stack unwind信息,我们也发现,arm中的异常处理,
不会像x86一样在stack frame中添加新的信息.

**** 开销计算

所以,综上, 在不触发异常的情况下,异常处理不会对程序运行造成效率问题. 而
在触发异常的情况下,由于要不停地在stack frame中跳转,会严重影响程序运行,
就如同打印堆栈信息会严重拖慢程序运行一样.


*** exceptions安装(try .. catch ..) (DW2篇)
    DW2 全称是 DWARF2, 指调试人已记录格式V2, 是用户调试的信息格式的规格.
    而exceptions DW2 版是指,利用DW2的调试信息实现的exceptions跳转等动作.
    一般时Unwind-dw2 实现.
    上面是一个测试异常抛出程序的sections信息中unwind table index信息. 通过
    这个信息间接证明了我们系统是用DW2实现的异常处理.由于这些信息是在编译时
    就生成的,相对与SjLj,存在了一个优势,在未触发异常处理的情况下,异常对程序
    的运行没有额外的资源消耗.
    执行异常处理的流程:
    #+BEGIN_EXAMPLE
    Unwind table index '.ARM.exidx' at offset 0xc34 contains 8 entries:

    0x850 <_Z3fucdd>: @0xb94
    Compact model 1
    0xc9 0x80 [unsupported two-byte opcode]
    0xb1 0x08 pop {r3}
    0x84 0x00 pop {r14}

    0x890 <_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateEi>: @0xba0
    Compact model 1
    0xb1 0x08 pop {r3}
    0x84 0x00 pop {r14}
    0xb0      finish
    0xb0      finish

    0x8ac <_ZNSo5flushEv>: 0x80a8b0b0
    Compact model 0
    0xa8      pop {r4r14}
    0xb0      finish
    0xb0      finish

    0x942 <_ZNSt4priv9__put_numIcSt11char_traitsIcEdEERSt13basic_ostreamIT_T0_ES7_T1_>: @0xbac
    Personality routine: 0x7d4 <__aeabi_unwind_cpp_pr0+0x7d4>

    0x9e8 <_ZNSo14_M_put_nowidenEPKc>: @0xbd8
    Personality routine: 0x7d4 <__aeabi_unwind_cpp_pr0+0x7d4>

    0xaae <_ZNSo3putEc>: @0xbf8
    Personality routine: 0x7d4 <__aeabi_unwind_cpp_pr0+0x7d4>

    0xb08 <main>: @0xc14
    Personality routine: 0x7d4 <__aeabi_unwind_cpp_pr0+0x7d4>

    0xb94 <main+0x8c>: 0x1 [cantunwind]

    Symbol table '.dynsym' contains 28 entries:
    Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_unwind_cpp_pr0
     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND strlen
     3: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6localeD1Ev
     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND __gxx_personality_v0
     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_end_cleanup
     6: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt6localeC1ERKS_
     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNKSt6locale12_M_use_facetERKNS_2idE
     8: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt8ios_base16_M_throw_failureEv
     9: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZSt4cout
    10: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZSt4cerr
    11: 00003000     0 NOTYPE  GLOBAL DEFAULT   18 __dso_handle
    12: 00000000     0 FUNC    GLOBAL DEFAULT  UND exit
    13: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZNSt4priv11_GetFacetIdEPKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
    14: 00001199   190 FUNC    WEAK   DEFAULT    8 _ZNSt4priv12__init_bostrIcSt11char_traitsIcEEEbRSt13basic_ostreamIT_T0_E
    15: 00000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt18uncaught_exceptionv
    16: 00000d1d   266 FUNC    WEAK   DEFAULT    8 _ZNSt4priv9__put_numIcSt11char_traitsIcEdEERSt13basic_ostreamIT_T0_ES7_T1_
    17: 00002e88     0 NOTYPE  GLOBAL DEFAULT   13 __INIT_ARRAY__
    18: 00002e90     0 NOTYPE  GLOBAL DEFAULT   14 __FINI_ARRAY__
    19: 00003000     0 NOTYPE  GLOBAL DEFAULT  ABS _edata
    20: 00003000     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start
    21: 00003010     0 NOTYPE  GLOBAL DEFAULT  ABS _end
    22: 00000738     0 FUNC    GLOBAL DEFAULT  UND __libc_init
    23: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_allocate_exception
    24: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_throw
    25: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_begin_catch
    26: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_end_catch
    27: 00000000     0 OBJECT  GLOBAL DEFAULT  UND _ZTId

    Relocation section '.rel.plt' at offset 0x6ac contains 15 entries:
    Offset     Info    Type                Sym. Value  Symbol's Name
    00002fc4  00001616 R_ARM_JUMP_SLOT        00000738   __libc_init
    00002fc8  00000216 R_ARM_JUMP_SLOT        00000000   strlen
    00002fcc  00000616 R_ARM_JUMP_SLOT        00000000   _ZNSt6localeC1ERKS_
    00002fd0  00000816 R_ARM_JUMP_SLOT        00000000   _ZNSt8ios_base16_M_throw_failureEv
    00002fd4  00001716 R_ARM_JUMP_SLOT        00000000   __cxa_allocate_exception
    00002fd8  00001816 R_ARM_JUMP_SLOT        00000000   __cxa_throw
    00002fdc  00001a16 R_ARM_JUMP_SLOT        00000000   __cxa_end_catch
    00002fe0  00000516 R_ARM_JUMP_SLOT        00000000   __cxa_end_cleanup
    00002fe4  00001916 R_ARM_JUMP_SLOT        00000000   __cxa_begin_catch
    00002fe8  00000c16 R_ARM_JUMP_SLOT        00000000   exit
    00002fec  00000416 R_ARM_JUMP_SLOT        00000000   __gxx_personality_v0
    00002ff0  00000316 R_ARM_JUMP_SLOT        00000000   _ZNSt6localeD1Ev
    00002ff4  00000f16 R_ARM_JUMP_SLOT        00000000   _ZSt18uncaught_exceptionv
    00002ff8  00000d16 R_ARM_JUMP_SLOT        00000000   _ZNSt4priv11_GetFacetIdEPKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
    00002ffc  00000716 R_ARM_JUMP_SLOT        00000000   _ZNKSt6locale12_M_use_facetERKNS_2idE
    #+END_EXAMPLE
+ 首先读出personality. personality是包含对应异常的似有数据信息,其中有
  异常类型.
+ 判定异常类型,
