* tcmalloc2.1 浅析

** 简介
   tcmalloc(thread cached malloc) 是由google为并发程序而开发的内存分配管理器.tcmalloc致力于
   减少多线程内存请求时对锁的竞争, 在对小内存的申请时, 可以在无需锁的
   情况下高效获取内存;而在获取大内存时,使用高校的spinlocks.正因为
   tcmalloc是在线程局部空间(TLS)预先存储部分空闲内存用于分配, 在程序刚
   启动时,其所占用的内存会比dlmalloc或其他的内存管理器更大,但其增长速
   幅度比其他管理器小,所以,在后期,实际占用内存空间会相接近.

** 原理简析

*** overview

    [[https://raw.githubusercontent.com/pengzhangdev/documents/master/tcmalloc/overview.gif]]

    tcmalloc为每一个线程分配一个线程本地缓存(Thread Cache)．所有小对象
    (<256K)都会优先从Thread Cache分配．而当Thread Cache没有足够空闲内
    存时，就会从Central Heap申请内存. 而当Thread Cache内存富裕时,会将
    内存返回给Central Heap. Central Heap 是以进程为单位存在,Thread
    Cache是以线程为单位存在.
    对于大内存(>256K), 直接从Central Heap 按页对齐(4K)申请.
    通常情况下, 一连串的页面(4k)可以多个小内存序列,每个序列元素等大小.

*** 小对象内存分配
    [[https://raw.githubusercontent.com/pengzhangdev/documents/master/tcmalloc/threadheap.gif]]


** 代码review

** 总结

** 草稿

+ 主要函数
#+BEGIN_SRC cpp
extern "C" PERFTOOLS_DLL_DECL void* tc_malloc(size_t size) __THROW
extern "C" PERFTOOLS_DLL_DECL void tc_free(void* ptr) __THROW
extern "C" PERFTOOLS_DLL_DECL void* tc_calloc(size_t n,
                                              size_t elem_size) __THROW
extern "C" PERFTOOLS_DLL_DECL void tc_cfree(void* ptr) __THROW
extern "C" PERFTOOLS_DLL_DECL void* tc_realloc(void* old_ptr,
                                               size_t new_size) __THROW
extern "C" PERFTOOLS_DLL_DECL void* tc_new(size_t size)
extern "C" PERFTOOLS_DLL_DECL void tc_delete(void* p) __THROW
#+END_SRC

   真正分配内存的函数是do_malloc函数.

*** tc_malloc

#+BEGIN_SRC cpp
// line: 1577 file: /root/git/gperftools/src/tcmalloc.cc
extern "C" PERFTOOLS_DLL_DECL void* tc_malloc(size_t size) __THROW {
  void* result = do_malloc_or_cpp_alloc(size);
  MallocHook::InvokeNewHook(result, size);
  return result;
}
// line: 1581
#+END_SRC

#+BEGIN_SRC cpp
// line: 1038 file: /root/git/gperftools/src/tcmalloc.cc
inline void* do_malloc_or_cpp_alloc(size_t size) {
  // tc_new_mode 是指是否使用cpp的new来替换malloc实现.
  // 默认情况下为使用malloc, 所以代码进入do_malloc(size);
  return tc_new_mode ? cpp_alloc(size, true) : do_malloc(size);
}
// line: 1041
#+END_SRC

#+BEGIN_SRC cpp
// line: 1118 file: /root/git/gperftools/src/tcmalloc.cc
inline void* do_malloc(size_t size) {
  void* ret = do_malloc_no_errno(size);
  // UNLIKELY 是gcc的优化扩展,表示其测试成立条件极低.
  //
  if (UNLIKELY(ret == NULL)) errno = ENOMEM;
  return ret;
}
// line: 1123
#+END_SRC

#+BEGIN_SRC cpp
// line:   49 file: /root/git/gperftools/src/common.h
#define UNLIKELY(x) __builtin_expect(!!(x), 0)
// line:   49
#+END_SRC
