* vm mem manage

** 内存管理方式
+  marked:  底层基于无锁的dlmalloc实现.
+  Copying: 基于队列(BlockQueue)实现的内存管理.

*** marked(标记法)
**** 代码位置: android-rt/dalvik/vm/alloc/{HeapSource.cpp}
**** 综述
     + 每一个VM, 对应一个内存管理, 也对应一个GCDemon.
     + 每一个内存管理, 底部的内存管理由dlmalloc的mspace相关接口接手.
       实际的内存池空间由VM 通过mmap指定, 可以由dlmalloc动态增长.
     + dlmalloc管理的内存池被认为底层内存池, VM自己基于该内存池封装了
       一个上层内存池, 原因是, 需要GC进行管理, 所以必须有这么一个GC内
       存池存在.
**** 初始化
     + 分配一块连续的大内存,大小为maximumSize. mmap 分配匿名空间.
       (Misc.cpp:607)
     + 基于mspace的机制, 创建无锁的内存池.(HeapSource.cpp:322)
       + 修改mmap分配的第一页为可读, 该区域内存放mstate, 类似dlmalloc
         全局变量gm, 保存所有内存池相关的信息. (mspace.c:create_contiguous_mspace_with_base:137)
       + 调用dlmalloc的create_mspace_with_base 创建内存池, 特别指出,
         我们不使用dlmalloc的锁保证线程安全.
         + 初始化dlmalloc的分箱, top块, dv块等.并保存当前的内存大小
           (footprint)为初始大小. (dlmalloc.c:init_user_mstate:4678)
       + 在基地址和 mstate 之间存放 VM 管理的一个结构体, 保存着相关的
         brk和top的地址.
       + 设置mspace中允许的最大请求数.(HeapSource.cpp:createMspace:341)
     + 初始化GC 和HeapSource 结构体, 分别由GC程序和内存分配使用
     + 将mspace分配获得的内存池的地址保存到HeapSource的Heap成员中.
       HeapSource 保存2个Heap.
     + 初始化 live objects bitmap 和 mark bitmap
       这两个 bitmap 都是以 (8) 为粒度, 对HeapSource支持的最
       大内存进行管理. 也就是说每个bit位管理8byte的空间.
     + 为GC结构体分配mark stack, 该对象保存GC运行时的那一时刻的mark
       bitmap信息,用于记录内存回收过程中的信息. 所以, 在分配完成后立即
       使用madvise 将内存返回给kernel, 从而节省内存.

     need a pic to show process above

**** 内存分配
     + 入口函数位dvmAllocObject, 在java层调用new进行对象内存分配时,就
       调用到该点.(Alloc.cpp:dvmAllocObject::181)
     + 调用dvmMalloc, 实际上是向GC管理的HeapSource申请内
       存.(Heap.cpp:dvmMalloc:439)
       + 加锁! 
       + 尝试内存分配tryMalloc, 在这里面会做多次尝试.
         (Heap.cpp:tryMalloc:230)
         + 人品不好,请求size > growthLimit, 则请求GC后再次尝试申请吧.GC操
           作请看后文
         + 尝试从HeapSource申请内存.
           (HeapSource.cpp:dvmHeapSourceAlloc:871)
           + 从HeapSource 获取 用于分配内存的Heap
           + 如果Heap已经满了, 则拒绝分配. 依据: byteAllocate + n >
             softLimit ?
           + 调用dlmalloc中的mspace_calloc 进行内存分配.
           + 


*** Copying(拷贝法)
**** 代码位置: android-rt/dalvik/vm/alloc/{Copying.cpp}
**** 综述
     + 
     + 每一个VM管理一个内存块 队列(BlockQueue).
     + 


[[http://www.phonesdevelopers.com/1708168/][android dmv memory management research and analysis]]
[[http://blog.chinaunix.net/uid-28792672-id-4137627.html][android dalvik heap 简单分析]]
